{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Neutron"},{"location":"/index.html#neutron","text":"Neutron is a purely functional Apache Pulsar client for Scala, build on top of fs2 and the Java client for Pulsar.\nIt is published for Scala 2.13/3.1. You can include it in your project by adding the following dependencies.\nsbt libraryDependencies ++= Seq(\n  \"dev.profunktor\" %% \"neutron-core\" % \"0.1.0\",\n  \"dev.profunktor\" %% \"neutron-circe\" % \"0.1.0\",\n  \"dev.profunktor\" %% \"neutron-function\" % \"0.1.0\"\n) Maven <dependencies>\n  <dependency>\n    <groupId>dev.profunktor</groupId>\n    <artifactId>neutron-core_2.13</artifactId>\n    <version>0.1.0</version>\n  </dependency>\n  <dependency>\n    <groupId>dev.profunktor</groupId>\n    <artifactId>neutron-circe_2.13</artifactId>\n    <version>0.1.0</version>\n  </dependency>\n  <dependency>\n    <groupId>dev.profunktor</groupId>\n    <artifactId>neutron-function_2.13</artifactId>\n    <version>0.1.0</version>\n  </dependency>\n</dependencies> Gradle dependencies {\n  implementation \"dev.profunktor:neutron-core_2.13:0.1.0\"\n  implementation \"dev.profunktor:neutron-circe_2.13:0.1.0\"\n  implementation \"dev.profunktor:neutron-function_2.13:0.1.0\"\n}","title":"Neutron"},{"location":"/index.html#quick-start","text":"Here’s a quick consumer / producer example using neutron. Note: both are fully asynchronous.\nimport scala.concurrent.duration._\n\nimport dev.profunktor.pulsar._\nimport dev.profunktor.pulsar.schema.PulsarSchema\n\nimport cats.effect._\nimport fs2.Stream\n\nobject Demo extends IOApp.Simple {\n\n  val config = Config.Builder.default\n\n  val topic  =\n    Topic.Builder\n      .withName(\"my-topic\")\n      .withConfig(config)\n      .withType(Topic.Type.NonPersistent)\n      .build\n\n  val subs =\n    Subscription.Builder\n      .withName(\"my-sub\")\n      .withType(Subscription.Type.Exclusive)\n      .build\n\n  val schema = PulsarSchema.utf8\n\n  val resources: Resource[IO, (Consumer[IO, String], Producer[IO, String])] =\n    for {\n      pulsar   <- Pulsar.make[IO](config.url)\n      consumer <- Consumer.make[IO, String](pulsar, topic, subs, schema)\n      producer <- Producer.make[IO, String](pulsar, topic, schema)\n    } yield consumer -> producer\n\n  val run: IO[Unit] =\n    Stream\n      .resource(resources)\n      .flatMap {\n        case (consumer, producer) =>\n          val consume =\n            consumer\n              .autoSubscribe\n              .evalMap(IO.println)\n\n          val produce =\n            Stream\n              .emit(\"test data\")\n              .covary[IO]\n              .metered(3.seconds)\n              .evalMap(producer.send_)\n\n          consume.concurrently(produce)\n      }\n      .compile\n      .drain\n\n}","title":"Quick start"},{"location":"/reference/Index.html","text":"","title":"Reference"},{"location":"/reference/Index.html#reference","text":"This section contains detailed discussions of Neutron’s core abstractions and machinery.","title":"Reference"},{"location":"/reference/Index.html#table-of-contents","text":"Connection Configuration Pulsar client Consumer Subscriptions Creating a Consumer Auto-subscription Manual ack Unsubscribe Consumer settings Producer Creating a Producer Publishing a message Sharding Producer settings Reader Creating a Reader Reading messages Reader settings Schema UTF-8 JSON support Schema Compatibility Check Strategy Topic Single Multiple","title":"Table of Contents"},{"location":"/reference/Connection.html","text":"","title":"Connection"},{"location":"/reference/Connection.html#connection","text":"A connection to Apache Pulsar is an expensive operation, reason why it is recommended to create a single instance per application.\nThe main constructor returns a cats.effect.Resource, and is defined as follows.\nimport cats.effect._\nimport dev.profunktor.pulsar.Config.PulsarURL\nimport dev.profunktor.pulsar.Pulsar.Options\n\nimport org.apache.pulsar.client.api.{ PulsarClient => Underlying }\n\ntype T = Underlying\n\ndef make[F[_]: Sync](\n    url: PulsarURL,\n    opts: Options = Options()\n): Resource[F, T] = ???\nA PulsarURL can only be built using smart builders, as shown in the next section.","title":"Connection"},{"location":"/reference/Connection.html#configuration","text":"A default configuration is usually enough to get started locally.\nimport dev.profunktor.pulsar.Config\n\nval config = Config.Builder.default\nIt sets tenant=public, namespace=default, and url=pulsar://localhost:6650. If would like to change any of these values, you can use the configuration builder. E.g.\nval custom: Config =\n  Config.Builder\n    .withTenant(\"custom\")\n    .withNameSpace(\"services\")\n    .withURL(\"pulsar://custom.net:6650\")\n    .build","title":"Configuration"},{"location":"/reference/Connection.html#pulsar-client","text":"Once we have a configuration, we can proceed with the creation of a Pulsar client, necessary to create consumers, producers, and so on.\nimport dev.profunktor.pulsar._\n\nPulsar.make[IO](config.url)","title":"Pulsar client"},{"location":"/reference/Connection.html#connection-options","text":"Via the second constructor argument, we can set a few client options, such as timeouts.\nimport scala.concurrent.duration._\n\nval opts =\n  Options()\n    .withConnectionTimeout(45.seconds)\n    .withOperationTimeout(30.minutes)\n\nPulsar.make[IO](config.url, opts)","title":"Connection Options"},{"location":"/reference/Consumer.html","text":"","title":"Consumer"},{"location":"/reference/Consumer.html#consumer","text":"A consumer is a process that attaches to a topic via a subscription, in order to receive messages.\nNeutron models it via a tagless algebra.\nimport dev.profunktor.pulsar._\n\nimport fs2.Stream\nimport org.apache.pulsar.client.api.MessageId\n\nobject Consumer {\n  case class Message[A](id: MessageId, key: MessageKey, payload: A)\n}\n\ntrait Consumer[F[_], E] {\n  def ack(id: MessageId): F[Unit]\n  def nack(id: MessageId): F[Unit]\n  def subscribe: Stream[F, Consumer.Message[E]]\n  def autoSubscribe: Stream[F, E]\n  def unsubscribe: F[Unit]\n}\nWe will expand on its methods in the next few sections.","title":"Consumer"},{"location":"/reference/Consumer.html#subscriptions","text":"Pulsar supports multiple subscription modes, which can be created in Neutron via smart builders.\nimport dev.profunktor.pulsar._\n\nval subs =\n  Subscription.Builder\n    .withName(\"my-sub\")\n    .withType(Subscription.Type.Shared)\n    .build\nThere are four types of subscriptions: Exclusive, Shared, KeyShared, and Failover.","title":"Subscriptions"},{"location":"/reference/Consumer.html#creating-a-consumer","text":"There are a few smart constructors we can use to create a consumer. If we want Pulsar schema support, we have the following one:\nimport org.apache.pulsar.client.api.Schema\n\ndef make[F[_]: FutureLift: Sync, E](\n    client: Pulsar.T,\n    topic: Topic,\n    sub: Subscription,\n    schema: Schema[E]\n): Resource[F, Consumer[F, E]] = ???\nIf we do not want Pulsar schema support, then we need to provide a message decoder, and ideally a decoding error handler, which are both functions.\ndef make[F[_]: FutureLift: Sync, E](\n    client: Pulsar.T,\n    topic: Topic,\n    sub: Subscription,\n    messageDecoder: Array[Byte] => F[E],\n    decodingErrorHandler: Throwable => F[OnFailure] // defaults to Raise\n): Resource[F, Consumer[F, E]] = ???\nFor example, an UTF-8 encoded string could be the following one:\nimport java.nio.charset.StandardCharsets.UTF_8\n\nval utf8Decoder: Array[Byte] => IO[String] =\n  bs => IO(new String(bs, UTF_8))\nOr we could use a JSON decoder powered by Circe:\nimport io.circe.Decoder\n\ndef jsonDecoder[A: Decoder]: Array[Byte] => IO[A] =\n  bs => IO.fromEither(io.circe.parser.decode[A](new String(bs, UTF_8)))\nIf we do not specify the decoding error handler, then the default is to re-raise the error when a message cannot be decoded. That’s usually a sane default, but every case is different and you might want to ack or nack the message, which can be done as follows:\nval handler: Throwable => IO[Consumer.OnFailure] =\n  e => IO.println(s\"[error] - ${e.getMessage}\").as(Consumer.OnFailure.Nack)\nFinally, there’s a generic make which takes an Settings[F, E] where we can set many other consumer settings, including schema or decoding handler.\nBEWARE if you set the pulsar schema, then a decoding error handler won’t take effect. Also, if you do not set neither the schema or the message decoder, then you’ll get a runtime error when creating the consumer.\ndef make[F[_]: Sync: FutureLift, E](\n    client: Pulsar.T,\n    topic: Topic,\n    sub: Subscription,\n    settings: Settings[F, E]\n): Resource[F, Consumer[F, E]] = ???\nOnce we have a subscription, we can create a consumer, assuming we also have a pulsar connection and a topic.\nIf you missed that part, check out the connection and topic docs.\nimport dev.profunktor.pulsar.schema.PulsarSchema\n\nimport cats.effect._\n\nval schema = PulsarSchema.utf8\n\ndef creation(\n    pulsar: Pulsar.T,\n    topic: Topic\n): Resource[IO, Consumer[IO, String]] =\n  Consumer.make[IO, String](pulsar, topic, subs, schema)","title":"Creating a Consumer"},{"location":"/reference/Consumer.html#auto-subscription","text":"This is the easiest way to get started with a consumer. Once a message is received, it will be automatically acknowledged (ack) by us. It is done via the autoSubscribe method, as shown below.\ndef auto(\n    consumer: Consumer[IO, String]\n): IO[Unit] =\n  consumer\n   .autoSubscribe\n   .evalMap(IO.println)\n   .compile\n   .drain\nIn this case, autoSubscribe returns Stream[IO, String], meaning we directly get the body of the message.","title":"Auto-subscription"},{"location":"/reference/Consumer.html#manual-ack","text":"In most serious applications, this should be the preferred way to consume messages, to avoid losing messages whenever the application fails after consuming a message.\nFor this purpose, we can use the subscribe method, as shown in the example below.\ndef process(payload: String): IO[Unit] =\n  IO.println(s\"Payload: $payload\")\n\ndef manual(\n    consumer: Consumer[IO, String]\n): IO[Unit] =\n  consumer\n   .subscribe\n   .evalMap { case Consumer.Message(id, _, payload) =>\n     process(payload) // pretend `process` might raise an error\n       .flatMap(_ => consumer.ack(id))\n       .handleErrorWith(e => IO.println(e) *> consumer.nack(id))\n   }\n   .compile\n   .drain\nIt allows us to decide whether to ack or nack a message (it will be re-delivered by Pulsar).","title":"Manual ack"},{"location":"/reference/Consumer.html#unsubscribe","text":"We can unsubscribe from a topic via the unsubscribe method, which implies deleting the subscription. We can do this whenever we are sure the process is over and we no longer need such subscription.\ndef finish(\n    consumer: Consumer[IO, String]\n): IO[Unit] =\n  consumer\n   .autoSubscribe\n   .evalMap(IO.println)\n   .onFinalize(consumer.unsubscribe)\n   .compile\n   .drain\nThis functionality can be enabled to be performed automatically via the autoUnsubscribe option.","title":"Unsubscribe"},{"location":"/reference/Consumer.html#consumer-settings","text":"When creating a consumer, we can choose to customize the default options. E.g.\nimport java.nio.charset.StandardCharsets.UTF_8\n\nimport org.apache.pulsar.client.api.{\n  DeadLetterPolicy,\n  SubscriptionInitialPosition\n}\n\nval deadLetterPolicy =\n  DeadLetterPolicy\n    .builder()\n    .deadLetterTopic(\"foo\")\n    .maxRedeliverCount(100)\n    .retryLetterTopic(\"bar\")\n    .build()\n\nval utf8Decoder: Array[Byte] => IO[String] =\n  bs => IO(new String(bs, UTF_8))\n\nval handler: Throwable => IO[Consumer.OnFailure] =\n  e => IO.println(s\"[error] - ${e.getMessage}\").as(Consumer.OnFailure.Nack)\n\nval settings =\n  Consumer.Settings[IO, String]()\n   .withInitialPosition(SubscriptionInitialPosition.Earliest)\n   .withLogger(e => url => IO.println(s\"Message: $e, URL: $url\"))\n   .withAutoUnsubscribe\n   .withReadCompacted\n   .withDeadLetterPolicy(deadLetterPolicy)\n   .withMessageDecoder(utf8Decoder)\n   .withDecodingErrorHandler(handler)\n\ndef custom(\n    pulsar: Pulsar.T,\n    topic: Topic\n): Resource[IO, Consumer[IO, String]] =\n  Consumer.make[IO, String](pulsar, topic, subs, settings)","title":"Consumer settings"},{"location":"/reference/Producer.html","text":"","title":"Producer"},{"location":"/reference/Producer.html#producer","text":"A producer is a process that attaches to a topic and publishes messages to a Pulsar broker.\nNeutron models it via a tagless algebra.\nimport dev.profunktor.pulsar._\nimport org.apache.pulsar.client.api.MessageId\n\ntrait Producer[F[_], E] {\n  def send(msg: E): F[MessageId]\n  def send(msg: E, key: MessageKey): F[MessageId]\n  def send_(msg: E): F[Unit]\n  def send_(msg: E, key: MessageKey): F[Unit]\n}\nWe will expand on its methods in the next few sections.","title":"Producer"},{"location":"/reference/Producer.html#creating-a-producer","text":"It defines a few constructs, similarly as Consumer does. If we need Pulsar schema support:\ndef make[F[_]: FutureLift: Parallel: Sync, E](\n    client: Pulsar.T,\n    topic: Topic.Single,\n    schema: Schema[E]\n): Resource[F, Producer[F, E]] = ???\nIf we do not need Pulsar schema support, we need to provide a message encoder.\ndef make[F[_]: FutureLift: Parallel: Sync, E](\n    client: Pulsar.T,\n    topic: Topic.Single,\n    messageEncoder: E => Array[Byte]\n): Resource[F, Producer[F, E]] = ???\nOtherwise, we have the generic constructor that takes in a Producer.Settings argument.\ndef make[F[_]: Sync, E](\n    client: Pulsar.T,\n    topic: Topic.Single,\n    settings: Settings[F, E] = null // default value does not work with generics\n): Resource[F, Producer[F, E]] = ???\nOnce we have a connection and a topic, we can proceed with the creation of producer. If you missed that part, check out the connection and topic docs.\nimport dev.profunktor.pulsar._\nimport dev.profunktor.pulsar.schema.PulsarSchema\n\nimport cats.effect._\n\nval schema = PulsarSchema.utf8\n\ndef creation(\n    pulsar: Pulsar.T,\n    topic: Topic.Single\n): Resource[IO, Producer[IO, String]] =\n  Producer.make[IO, String](pulsar, topic, schema)","title":"Creating a Producer"},{"location":"/reference/Producer.html#publishing-a-message","text":"We can publish a message via the send method, which returns a MessageId we could potentially use to store in the application’s state. If you don’t need it, prefer to use send_ instead.\ndef simple(\n    producer: Producer[IO, String]\n): IO[Unit] =\n  producer.send_(\"some-message\")","title":"Publishing a message"},{"location":"/reference/Producer.html#sharding","text":"The other two variations also take a MessageKey as argument, which is used for distributing messages.\nsealed trait MessageKey\nobject MessageKey {\n  final case class Of(value: String) extends MessageKey\n  case object Empty extends MessageKey\n}\nThis could be useful if you want to publish a message to a specific shard at some point.\ndef shard(\n    producer: Producer[IO, String]\n): IO[Unit] = {\n  val msg = \"some-message\"\n  val key = MessageKey.Of(msg.hashCode.toString)\n  producer.send_(msg, key)\n}\nHowever, if you always want to publish messages according to a specific key, prefer to use the withShardKey option, described in the next section.","title":"Sharding"},{"location":"/reference/Producer.html#producer-settings","text":"The producer constructor can also be customized with a few extra options. E.g.\nimport java.nio.charset.StandardCharsets.UTF_8\n\nimport scala.concurrent.duration._\n\nval batching =\n  Producer.Batching.Enabled(maxDelay = 5.seconds, maxMessages = 500)\n\nval settings =\n  Producer.Settings[IO, String]()\n   .withBatching(batching)\n   .withShardKey(s => ShardKey.Of(s.hashCode.toString.getBytes))\n   .withLogger(e => url => IO.println(s\"Message: $e, URL: $url\"))\n   .withMessageEncoder(_.getBytes(UTF_8))\n\ndef custom(\n    pulsar: Pulsar.T,\n    topic: Topic.Single\n): Resource[IO, Producer[IO, String]] =\n  Producer.make(pulsar, topic, settings)\nThe withShardKey option is quite useful when we want to publish messages based on certain property of your messages, e.g. an EventId. This applies when you use it together with KeyShared subscriptions, on the consumer side.\nWhen a ShardKey is defined, we don’t need to provide a MessageKey manually and can just use the simple send and send_ methods that take a single argument: the payload.","title":"Producer settings"},{"location":"/reference/Reader.html","text":"","title":"Reader"},{"location":"/reference/Reader.html#reader","text":"A reader allows you to “manually position” the offset within a topic and reading all messages from a specified message onward. For instance, you can start from a specific MessageId.\nNeutron models it via a tagless algebra, as usual.\nimport scala.concurrent.duration.FiniteDuration\nimport fs2.Stream\n\nobject Reader {\n  sealed trait MessageAvailable\n  object MessageAvailable {\n    case object Yes extends MessageAvailable\n    case object No extends MessageAvailable\n  }\n}\n\ntrait Reader[F[_], E] {\n  def read: Stream[F, E]\n  def read1: F[Option[E]]\n  def readUntil(timeout: FiniteDuration): F[Option[E]]\n  def messageAvailable: F[Reader.MessageAvailable]\n}\nThere’s also a MessageReader algebra, useful whenever you need more than the payload of the message, such as the MessageId and MessageKey.","title":"Reader"},{"location":"/reference/Reader.html#creating-a-reader","text":"It provides a few constructors as both Consumer and Producer do for schema and message decoders, in addition to the following generic one.\nimport dev.profunktor.pulsar._\nimport dev.profunktor.pulsar.Reader.Settings\n\nimport cats.effect._\n\ndef make[F[_]: Sync, E](\n    client: Pulsar.T,\n    topic: Topic.Single,\n    settings: Settings[F, E]\n): Resource[F, Reader[F, E]] = ???\nIf you’re interested in a MessageReader instead, you can use messageReader instead of make.\nOnce we have a Pulsar client and a topic, we can proceed with the creation of a reader. If you missed that part, check out the connection and topic docs.\nimport dev.profunktor.pulsar._\nimport dev.profunktor.pulsar.schema.PulsarSchema\n\nimport cats.effect._\n\nval schema = PulsarSchema.utf8\n\ndef creation(\n    pulsar: Pulsar.T,\n    topic: Topic.Single\n): Resource[IO, Reader[IO, String]] =\n  Reader.make[IO, String](pulsar, topic, schema)","title":"Creating a Reader"},{"location":"/reference/Reader.html#reading-messages","text":"We can use any of the available read methods. E.g.\ndef simple(\n    reader: Reader[IO, String]\n): IO[Unit] =\n  reader\n   .read\n   .evalMap(IO.println)\n   .compile\n   .drain\nOr we can first ask whether there are available messages or not via messageAvailable.","title":"Reading messages"},{"location":"/reference/Reader.html#reader-settings","text":"The reader constructor can also be customized with a few extra options. E.g.\nimport org.apache.pulsar.client.api.MessageId\n\nval msgId: MessageId = null\n\nval settings =\n  Reader.Settings[IO, String]()\n   .withStartMessageId(msgId)\n   .withReadCompacted\n   .withSchema(schema)\n\ndef custom(\n    pulsar: Pulsar.T,\n    topic: Topic.Single\n): Resource[IO, Reader[IO, String]] =\n  Reader.make(pulsar, topic, settings)\nIt is the responsibility of the application to know the specific MessageId, which internally represents a Ledger ID, Entry ID, and Partition ID.","title":"Reader settings"},{"location":"/reference/Schema.html","text":"","title":"Schema"},{"location":"/reference/Schema.html#schema","text":"Neutron ships with support for Pulsar schemas, which are validated by Pulsar at the topic level, via an internal schema registry.\nThere are pros and cons to using the native support, so make sure you give the official documentation a thorough read before making a decision.\nIf you only want to play around with Pulsar to get familiar with it, you can either choose UTF-8 or the simple JSON support via SchemaType.BYTES, which have no validation whatsoever, as explained in the next sections.","title":"Schema"},{"location":"/reference/Schema.html#utf-8","text":"The simplest way to get started is to use the given UTF-8 encoding, which makes use of the native Schema.BYTES.\nimport dev.profunktor.pulsar.schema.PulsarSchema\nimport org.apache.pulsar.client.api.Schema\n\nval schema: Schema[String] = PulsarSchema.utf8\nHere we create a Schema[String], required to initialize consumers and producers with Pulsar schema support.\nNote When using schemas, prefer to create the producer(s) before the consumer(s) for fail-fast semantics.","title":"UTF-8"},{"location":"/reference/Schema.html#json-support","text":"One of the most common communication protocols is JSON, and Neutron integrates with the Circe library to support it via the neutron-circe dependency.\nIt sets SchemaType.JSON, which means topics can be inspected by Pulsar Functions and so on, and it is validated by Pulsar at runtime, when creating producers and consumers.\nThe recommended one is based on semi-automatic derivation, as shown in the example below.\nimport dev.profunktor.pulsar.schema.circe.JsonSchema\nimport org.apache.pulsar.client.api.Schema\n\nimport io.circe.{Decoder, Encoder}\nimport io.circe.generic.semiauto._\n\ncase class Event(id: Long, name: String)\nobject Event {\n  implicit val jsonEncoder: Encoder[Event] = deriveEncoder\n  implicit val jsonDecoder: Decoder[Event] = deriveDecoder\n}\n\nval schema: Schema[Event] = JsonSchema.make[Event]\nIt requires instances of Decoder and Encoder, and of SchemaFor, which comes from the avro4s library.\nNotice that avro4s is marked as Provided, meaning you need to explicitly add it to your classpath.","title":"JSON support"},{"location":"/reference/Schema.html#schema-compatibility-check-strategy","text":"Whenever using schemas, make sure you fully understand the different strategies, which only operate at the namespace level (e.g. see how integration tests are set up in the run.sh shell script).\nFor instance, when using the BACKWARD mode, a producer and consumer will fail to initialize if the schemas are incompatible, even if your custom JSON decoder can deserialize the previous model, the Pulsar broker doesn’t know about it. E.g. say we have this model in our new application.\ncase class Event(uuid: UUID, value: String)\nThe generated Avro schema will look as follows.\n{\n  \"type\" : \"record\",\n  \"name\" : \"Event\",\n  \"namespace\" : \"dev.profunktor.pulsar.domain\",\n  \"fields\" : [ {\n    \"name\" : \"uuid\",\n    \"type\" : {\n      \"type\" : \"string\",\n      \"logicalType\" : \"uuid\"\n    }\n  }, {\n    \"name\" : \"value\",\n    \"type\" : \"string\"\n  } ]\n}\nAnd later on, we introduce a breaking change in the model, adding a new mandatory field.\ncase class Event(uuid: UUID, value: String, code: Int)\nThis will be rejected at runtime, validated by Pulsar Schemas, when using the BACKWARD mode. The only changes allowed in this mode are:\nAdd optional fields Delete fields\nSee the generated Avro schema below.\n{\n  \"type\" : \"record\",\n  \"name\" : \"Event\",\n  \"namespace\" : \"dev.profunktor.pulsar.domain\",\n  \"fields\" : [ {\n    \"name\" : \"uuid\",\n    \"type\" : {\n      \"type\" : \"string\",\n      \"logicalType\" : \"uuid\"\n    }\n  }, {\n    \"name\" : \"value\",\n    \"type\" : \"string\"\n  }, {\n    \"name\" : \"code\",\n    \"type\" : \"int\"\n  } ]\n}\nInstead, we should make the new field optional with a default value for this to work.\ncase class Event(uuid: UUID, value: String, code: Option[Int] = None)\nThis is now accepted by Pulsar since any previous Event still not consumed from a Pulsar topic can still be processed by the new consumers expecting the new schema.\n{\n  \"type\" : \"record\",\n  \"name\" : \"Event\",\n  \"namespace\" : \"dev.profunktor.pulsar.domain\",\n  \"fields\" : [ {\n    \"name\" : \"uuid\",\n    \"type\" : {\n      \"type\" : \"string\",\n      \"logicalType\" : \"uuid\"\n    }\n  }, {\n    \"name\" : \"value\",\n    \"type\" : \"string\"\n  }, {\n    \"name\" : \"code\",\n    \"type\" : [ \"null\", \"int\" ],\n    \"default\" : null\n  } ]\n}\nSee the difference with the previous schema? This one has a default: null in addition to the extra null type.","title":"Schema Compatibility Check Strategy"},{"location":"/reference/Topic.html","text":"","title":"Topic"},{"location":"/reference/Topic.html#topic","text":"A Topic has a well-defined structure.\n{persistent|non-persistent}://tenant/namespace/topic\nTo ensure correctness, it is necessary to build topics via smart builders.","title":"Topic"},{"location":"/reference/Topic.html#single","text":"A single topic is built via a Topic.Builder, as we have seen in the quick start section.\nimport dev.profunktor.pulsar._\n\nval config = Config.Builder.default\n\nval single: Topic.Single =\n  Topic.Builder\n    .withName(\"my-topic\")\n    .withConfig(config)\n    .withType(Topic.Type.Persistent)\n    .build\nTo learn more about configurations, check out the Connection section.","title":"Single"},{"location":"/reference/Topic.html#multiple","text":"Pulsar also supports subscriptions to multiple topics, which can be built using the same smart builder.\nval multi: Topic.Multi =\n  Topic.Builder\n    .withNamePattern(\"events-*\".r)\n    .withConfig(config)\n    .withType(Topic.Type.Persistent)\n    .buildMulti\nThe withNamePattern method takes a regular expression as input.","title":"Multiple"}]}